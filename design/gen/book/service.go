// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book service
//
// Command:
// $ goa gen book-store/design

package book

import (
	bookviews "book-store/design/gen/book/views"
	"context"
)

// The book service performs operations for books
type Service interface {
	// GetBook implements getBook.
	GetBook(context.Context, *GetBookPayload) (res *BookResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "book"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getBook"}

// BookResult is the result type of the book service getBook method.
type BookResult struct {
	// ID of the book
	ID *int
	// of the book
	Title *string
	// author of the book
	Author *string
	// cover of the book
	BookCover [][]byte
	// cover of the book
	PublishedAt *string
}

// GetBookPayload is the payload type of the book service getBook method.
type GetBookPayload struct {
	// Book ID
	BookID int
}

// NewBookResult initializes result type BookResult from viewed result type
// BookResult.
func NewBookResult(vres *bookviews.BookResult) *BookResult {
	return newBookResult(vres.Projected)
}

// NewViewedBookResult initializes viewed result type BookResult from result
// type BookResult using the given view.
func NewViewedBookResult(res *BookResult, view string) *bookviews.BookResult {
	p := newBookResultView(res)
	return &bookviews.BookResult{Projected: p, View: "default"}
}

// newBookResult converts projected type BookResult to service type BookResult.
func newBookResult(vres *bookviews.BookResultView) *BookResult {
	res := &BookResult{
		ID:          vres.ID,
		Title:       vres.Title,
		Author:      vres.Author,
		PublishedAt: vres.PublishedAt,
	}
	if vres.BookCover != nil {
		res.BookCover = make([][]byte, len(vres.BookCover))
		for i, val := range vres.BookCover {
			res.BookCover[i] = val
		}
	}
	return res
}

// newBookResultView projects result type BookResult to projected type
// BookResultView using the "default" view.
func newBookResultView(res *BookResult) *bookviews.BookResultView {
	vres := &bookviews.BookResultView{
		ID:          res.ID,
		Title:       res.Title,
		Author:      res.Author,
		PublishedAt: res.PublishedAt,
	}
	if res.BookCover != nil {
		vres.BookCover = make([][]byte, len(res.BookCover))
		for i, val := range res.BookCover {
			vres.BookCover[i] = val
		}
	}
	return vres
}
