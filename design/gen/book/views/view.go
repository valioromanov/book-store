// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book views
//
// Command:
// $ goa gen book-store/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// BookResult is the viewed result type that is projected based on a view.
type BookResult struct {
	// Type to project
	Projected *BookResultView
	// View to render
	View string
}

// BookResultView is a type that runs validations on a projected type.
type BookResultView struct {
	// ID of the book
	ID *int
	// of the book
	Title *string
	// author of the book
	Author *string
	// cover of the book
	BookCover [][]byte
	// cover of the book
	PublishedAt *string
}

var (
	// BookResultMap is a map indexing the attribute names of BookResult by view
	// name.
	BookResultMap = map[string][]string{
		"default": {
			"id",
			"title",
			"author",
			"bookCover",
			"publishedAt",
		},
	}
)

// ValidateBookResult runs the validations defined on the viewed result type
// BookResult.
func ValidateBookResult(result *BookResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBookResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateBookResultView runs the validations defined on BookResultView using
// the "default" view.
func ValidateBookResultView(result *BookResultView) (err error) {

	return
}
