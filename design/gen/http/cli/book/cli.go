// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book HTTP client CLI support package
//
// Command:
// $ goa gen book-store/design

package cli

import (
	bookc "book-store/design/gen/http/book/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `book (get-book|post-book|patch-book)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` book get-book --book-id 2700465139880268394` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		bookFlags = flag.NewFlagSet("book", flag.ContinueOnError)

		bookGetBookFlags      = flag.NewFlagSet("get-book", flag.ExitOnError)
		bookGetBookBookIDFlag = bookGetBookFlags.String("book-id", "REQUIRED", "Book ID")

		bookPostBookFlags    = flag.NewFlagSet("post-book", flag.ExitOnError)
		bookPostBookBodyFlag = bookPostBookFlags.String("body", "REQUIRED", "")

		bookPatchBookFlags    = flag.NewFlagSet("patch-book", flag.ExitOnError)
		bookPatchBookBodyFlag = bookPatchBookFlags.String("body", "REQUIRED", "")
		bookPatchBookIDFlag   = bookPatchBookFlags.String("id", "REQUIRED", "")
	)
	bookFlags.Usage = bookUsage
	bookGetBookFlags.Usage = bookGetBookUsage
	bookPostBookFlags.Usage = bookPostBookUsage
	bookPatchBookFlags.Usage = bookPatchBookUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "book":
			svcf = bookFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "book":
			switch epn {
			case "get-book":
				epf = bookGetBookFlags

			case "post-book":
				epf = bookPostBookFlags

			case "patch-book":
				epf = bookPatchBookFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "book":
			c := bookc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-book":
				endpoint = c.GetBook()
				data, err = bookc.BuildGetBookPayload(*bookGetBookBookIDFlag)
			case "post-book":
				endpoint = c.PostBook()
				data, err = bookc.BuildPostBookPayload(*bookPostBookBodyFlag)
			case "patch-book":
				endpoint = c.PatchBook()
				data, err = bookc.BuildPatchBookPayload(*bookPatchBookBodyFlag, *bookPatchBookIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// bookUsage displays the usage of the book command and its subcommands.
func bookUsage() {
	fmt.Fprintf(os.Stderr, `The book service performs operations for books
Usage:
    %[1]s [globalflags] book COMMAND [flags]

COMMAND:
    get-book: GetBook implements getBook.
    post-book: PostBook implements postBook.
    patch-book: PatchBook implements patchBook.

Additional help:
    %[1]s book COMMAND --help
`, os.Args[0])
}
func bookGetBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book get-book -book-id INT

GetBook implements getBook.
    -book-id INT: Book ID

Example:
    %[1]s book get-book --book-id 2700465139880268394
`, os.Args[0])
}

func bookPostBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book post-book -body JSON

PostBook implements postBook.
    -body JSON: 

Example:
    %[1]s book post-book --body '{
      "author": "Quidem asperiores.",
      "bookCover": "QWRpcGlzY2kgcXVvZC4=",
      "id": 9193006376374536106,
      "publishedAt": "Sint reprehenderit ex sit accusantium velit qui.",
      "title": "Itaque placeat labore cum sit illum suscipit."
   }'
`, os.Args[0])
}

func bookPatchBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book patch-book -body JSON -id INT

PatchBook implements patchBook.
    -body JSON: 
    -id INT: 

Example:
    %[1]s book patch-book --body '{
      "author": "Ut tenetur ut inventore voluptates.",
      "bookCover": "RWEgYSBhIHJlY3VzYW5kYWUu",
      "id": 4007170647046532603,
      "publishedAt": "Qui similique inventore et dolores quas.",
      "title": "Perferendis ut rerum."
   }' --id 1526759246777953065
`, os.Args[0])
}
