// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book HTTP client types
//
// Command:
// $ goa gen book-store/design

package client

import (
	bookviews "book-store/design/gen/book/views"
)

// GetBookResponseBody is the type of the "book" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// cover of the book
	BookCover [][]byte `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// cover of the book
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// NewGetBookBookResultOK builds a "book" service "getBook" endpoint result
// from a HTTP "OK" response.
func NewGetBookBookResultOK(body *GetBookResponseBody) *bookviews.BookResultView {
	v := &bookviews.BookResultView{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		PublishedAt: body.PublishedAt,
	}
	if body.BookCover != nil {
		v.BookCover = make([][]byte, len(body.BookCover))
		for i, val := range body.BookCover {
			v.BookCover[i] = val
		}
	}

	return v
}
