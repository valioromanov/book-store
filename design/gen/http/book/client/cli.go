// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book HTTP client CLI support package
//
// Command:
// $ goa gen book-store/design

package client

import (
	book "book-store/design/gen/book"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildGetBookPayload builds the payload for the book getBook endpoint from
// CLI flags.
func BuildGetBookPayload(bookGetBookBookID string) (*book.GetBookPayload, error) {
	var err error
	var bookID int
	{
		var v int64
		v, err = strconv.ParseInt(bookGetBookBookID, 10, strconv.IntSize)
		bookID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for bookID, must be INT")
		}
	}
	v := &book.GetBookPayload{}
	v.BookID = bookID

	return v, nil
}

// BuildPostBookPayload builds the payload for the book postBook endpoint from
// CLI flags.
func BuildPostBookPayload(bookPostBookBody string) (*book.BookReq, error) {
	var err error
	var body PostBookRequestBody
	{
		err = json.Unmarshal([]byte(bookPostBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Iusto dolores impedit hic.\",\n      \"bookCover\": \"TWFnbmFtIGV0IHZlbCB1dCBtb2xlc3RpYWUgY29uc2VxdXVudHVyIGVzdC4=\",\n      \"id\": 8667407008821495540,\n      \"publishedAt\": \"Labore ea voluptas repellendus eaque dignissimos animi.\",\n      \"title\": \"Consequuntur sint.\"\n   }'")
		}
	}
	v := &book.BookReq{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v, nil
}

// BuildPatchBookPayload builds the payload for the book patchBook endpoint
// from CLI flags.
func BuildPatchBookPayload(bookPatchBookBody string, bookPatchBookID string) (*book.BookPathcReq, error) {
	var err error
	var body PatchBookRequestBody
	{
		err = json.Unmarshal([]byte(bookPatchBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Dolores culpa dolorem beatae accusamus praesentium.\",\n      \"bookCover\": \"SWxsbyBjb25zZXF1YXR1ciB1dCBxdW9kIHN1bnQgZG9sb3IgZGlnbmlzc2ltb3Mu\",\n      \"id\": 1472432940674706831,\n      \"publishedAt\": \"Nesciunt velit ut officia quibusdam.\",\n      \"title\": \"Aperiam reprehenderit qui.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(bookPatchBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &book.BookPathcReq{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}
	v.ID = &id

	return v, nil
}

// BuildDeleteBookPayload builds the payload for the book deleteBook endpoint
// from CLI flags.
func BuildDeleteBookPayload(bookDeleteBookBookID string) (*book.DeleteBookPayload, error) {
	var err error
	var bookID int
	{
		var v int64
		v, err = strconv.ParseInt(bookDeleteBookBookID, 10, strconv.IntSize)
		bookID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for bookID, must be INT")
		}
	}
	v := &book.DeleteBookPayload{}
	v.BookID = bookID

	return v, nil
}
