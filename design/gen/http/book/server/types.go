// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book HTTP server types
//
// Command:
// $ goa gen book-store/design

package server

import (
	book "book-store/design/gen/book"
	bookviews "book-store/design/gen/book/views"

	goa "goa.design/goa/v3/pkg"
)

// PostBookRequestBody is the type of the "book" service "postBook" endpoint
// HTTP request body.
type PostBookRequestBody struct {
	ID          *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author      *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	BookCover   []byte  `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// PatchBookRequestBody is the type of the "book" service "patchBook" endpoint
// HTTP request body.
type PatchBookRequestBody struct {
	ID          *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Author      *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	BookCover   []byte  `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// GetBookResponseBody is the type of the "book" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// cover of the book
	BookCover []byte `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// cover of the book
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// PostBookResponseBodyResultOperation is the type of the "book" service
// "postBook" endpoint HTTP response body.
type PostBookResponseBodyResultOperation struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBookNotFoundResponseBody is the type of the "book" service "getBook"
// endpoint HTTP response body for the "NotFound" error.
type GetBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBookBadRequestResponseBody is the type of the "book" service "getBook"
// endpoint HTTP response body for the "BadRequest" error.
type GetBookBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostBookBadRequestResponseBody is the type of the "book" service "postBook"
// endpoint HTTP response body for the "BadRequest" error.
type PostBookBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PatchBookBadRequestResponseBody is the type of the "book" service
// "patchBook" endpoint HTTP response body for the "BadRequest" error.
type PatchBookBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PatchBookNotFoundResponseBody is the type of the "book" service "patchBook"
// endpoint HTTP response body for the "NotFound" error.
type PatchBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewGetBookResponseBody builds the HTTP response body from the result of the
// "getBook" endpoint of the "book" service.
func NewGetBookResponseBody(res *bookviews.BookResultView) *GetBookResponseBody {
	body := &GetBookResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Author:      res.Author,
		BookCover:   res.BookCover,
		PublishedAt: res.PublishedAt,
	}
	return body
}

// NewPostBookResponseBodyResultOperation builds the HTTP response body from
// the result of the "postBook" endpoint of the "book" service.
func NewPostBookResponseBodyResultOperation(res *bookviews.BookResultView) *PostBookResponseBodyResultOperation {
	body := &PostBookResponseBodyResultOperation{
		ID: res.ID,
	}
	return body
}

// NewGetBookNotFoundResponseBody builds the HTTP response body from the result
// of the "getBook" endpoint of the "book" service.
func NewGetBookNotFoundResponseBody(res *goa.ServiceError) *GetBookNotFoundResponseBody {
	body := &GetBookNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookBadRequestResponseBody builds the HTTP response body from the
// result of the "getBook" endpoint of the "book" service.
func NewGetBookBadRequestResponseBody(res *goa.ServiceError) *GetBookBadRequestResponseBody {
	body := &GetBookBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPostBookBadRequestResponseBody builds the HTTP response body from the
// result of the "postBook" endpoint of the "book" service.
func NewPostBookBadRequestResponseBody(res *goa.ServiceError) *PostBookBadRequestResponseBody {
	body := &PostBookBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPatchBookBadRequestResponseBody builds the HTTP response body from the
// result of the "patchBook" endpoint of the "book" service.
func NewPatchBookBadRequestResponseBody(res *goa.ServiceError) *PatchBookBadRequestResponseBody {
	body := &PatchBookBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPatchBookNotFoundResponseBody builds the HTTP response body from the
// result of the "patchBook" endpoint of the "book" service.
func NewPatchBookNotFoundResponseBody(res *goa.ServiceError) *PatchBookNotFoundResponseBody {
	body := &PatchBookNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBookPayload builds a book service getBook endpoint payload.
func NewGetBookPayload(bookID int) *book.GetBookPayload {
	v := &book.GetBookPayload{}
	v.BookID = bookID

	return v
}

// NewPostBookBookReq builds a book service postBook endpoint payload.
func NewPostBookBookReq(body *PostBookRequestBody) *book.BookReq {
	v := &book.BookReq{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewPatchBookBookPathcReq builds a book service patchBook endpoint payload.
func NewPatchBookBookPathcReq(body *PatchBookRequestBody, id int) *book.BookPathcReq {
	v := &book.BookPathcReq{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}
	v.ID = &id

	return v
}

// ValidatePostBookRequestBody runs the validations defined on
// PostBookRequestBody
func ValidatePostBookRequestBody(body *PostBookRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	return
}
