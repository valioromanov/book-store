// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book HTTP server types
//
// Command:
// $ goa gen book-store/design

package server

import (
	book "book-store/design/gen/book"
	bookviews "book-store/design/gen/book/views"
)

// GetBookResponseBody is the type of the "book" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// cover of the book
	BookCover [][]byte `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// cover of the book
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// NewGetBookResponseBody builds the HTTP response body from the result of the
// "getBook" endpoint of the "book" service.
func NewGetBookResponseBody(res *bookviews.BookResultView) *GetBookResponseBody {
	body := &GetBookResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Author:      res.Author,
		PublishedAt: res.PublishedAt,
	}
	if res.BookCover != nil {
		body.BookCover = make([][]byte, len(res.BookCover))
		for i, val := range res.BookCover {
			body.BookCover[i] = val
		}
	}
	return body
}

// NewGetBookPayload builds a book service getBook endpoint payload.
func NewGetBookPayload(bookID int) *book.GetBookPayload {
	v := &book.GetBookPayload{}
	v.BookID = bookID

	return v
}
