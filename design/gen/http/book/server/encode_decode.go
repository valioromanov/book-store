// Code generated by goa v3.14.1, DO NOT EDIT.
//
// book HTTP server encoders and decoders
//
// Command:
// $ goa gen book-store/design

package server

import (
	bookviews "book-store/design/gen/book/views"
	"context"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetBookResponse returns an encoder for responses returned by the book
// getBook endpoint.
func EncodeGetBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*bookviews.BookResult)
		enc := encoder(ctx, w)
		body := NewGetBookResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetBookRequest returns a decoder for requests sent to the book getBook
// endpoint.
func DecodeGetBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			bookID int
			err    error

			params = mux.Vars(r)
		)
		{
			bookIDRaw := params["bookID"]
			v, err2 := strconv.ParseInt(bookIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("bookID", bookIDRaw, "integer"))
			}
			bookID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetBookPayload(bookID)

		return payload, nil
	}
}
